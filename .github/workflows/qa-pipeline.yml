name: QA Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '14'

jobs:
  # Quality Check Stage
  quality-check:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Check Prettier formatting
      run: npm run format:check
      
    - name: TypeScript type checking
      run: npm run type-check
      
    - name: Security audit
      run: npm audit --audit-level moderate
      
    - name: Dependency vulnerability scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
        
  # Frontend Tests
  frontend-tests:
    name: Frontend Testing
    runs-on: ubuntu-latest
    needs: quality-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run unit tests
      run: npm run test:coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        
    - name: Component integration tests
      run: npm run test:integration
      
    - name: Bundle size check
      run: npm run build:analyze
      
    - name: Lighthouse CI
      uses: treosh/lighthouse-ci-action@v9
      with:
        configPath: './lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true

  # Backend Tests
  backend-tests:
    name: Backend Testing
    runs-on: ubuntu-latest
    needs: quality-check
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: workwise_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Setup test database
      run: npm run db:migrate:test
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/workwise_test
        
    - name: Run backend unit tests
      run: npm run test:server:coverage
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/workwise_test
        
    - name: Upload backend coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/server/lcov.info
        flags: backend
        name: backend-coverage
        
    - name: API integration tests
      run: npm run test:api
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/workwise_test
        
    - name: Performance tests
      run: npm run test:performance
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/workwise_test

  # Build Stage
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build frontend
      run: npm run build:client
      
    - name: Build backend
      run: npm run build:server
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          dist/
          client/dist/
        retention-days: 7

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        
    - name: Deploy to staging
      run: |
        # Add your staging deployment script here
        echo "Deploying to staging environment..."
        # Example: Deploy to Netlify, Vercel, or your staging server
        
    - name: Health check
      run: |
        # Wait for deployment to be ready
        sleep 30
        # Run health check against staging environment
        curl -f ${{ secrets.STAGING_URL }}/api/health || exit 1
        
    - name: Smoke tests
      run: npm run test:smoke:staging
      env:
        TEST_URL: ${{ secrets.STAGING_URL }}

  # End-to-End Tests
  e2e-tests:
    name: End-to-End Testing
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
      
    - name: Run E2E tests
      run: npm run test:e2e
      env:
        BASE_URL: ${{ secrets.STAGING_URL }}
        
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: |
          test-results/
          playwright-report/
        retention-days: 7
        
    - name: Visual regression tests
      run: npm run test:visual
      env:
        BASE_URL: ${{ secrets.STAGING_URL }}
        
    - name: Accessibility tests
      run: npm run test:a11y
      env:
        BASE_URL: ${{ secrets.STAGING_URL }}

  # Security Scan
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: OWASP ZAP Scan
      if: github.ref == 'refs/heads/develop'
      uses: zaproxy/action-full-scan@v0.7.0
      with:
        target: ${{ secrets.STAGING_URL }}
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [e2e-tests, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        
    - name: Deploy to production
      run: |
        # Add your production deployment script here
        echo "Deploying to production environment..."
        # Example: Deploy to your production server
        
    - name: Health check
      run: |
        # Wait for deployment to be ready
        sleep 60
        # Run health check against production environment
        curl -f ${{ secrets.PRODUCTION_URL }}/api/health || exit 1
        
    - name: Post-deployment tests
      run: npm run test:smoke:production
      env:
        TEST_URL: ${{ secrets.PRODUCTION_URL }}
        
    - name: Notify team
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: Clean up old artifacts
      run: |
        echo "Cleaning up old build artifacts..."
        # Add cleanup logic here
